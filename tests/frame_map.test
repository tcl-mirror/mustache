# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2021 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Check the type-specific behaviour of mapping frame objects.

kt check Tcl     8.5
kt check tcltest 2

kt local support mustache::frame

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## set

tcltest::test frame-mapping-set-1.0 "set, wrong args, not enough" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR set
} -returnCodes error -result {wrong # args: should be "FR set k val"}

tcltest::test frame-mapping-set-1.1 "set, wrong args, not enough" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR set K
} -returnCodes error -result {wrong # args: should be "FR set k val"}

tcltest::test frame-mapping-set-1.2 "set, wrong args, too many" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR set K VALUE X
} -returnCodes error -result {wrong # args: should be "FR set k val"}

tcltest::test frame-mapping-set-2.0 "set" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    list [FR has? K] [FR set K [mustache frame null new]] [FR has? K]
} -result {0 {} 1}

tcltest::test frame-mapping-set-2.1 "set, overwrite" -setup {
    mustache frame mapping create FR {}
    FR set K [mustache frame null new]
    set n [FR field K]
} -cleanup {
    FR destroy
    unset n
} -body {
    list [FR has? K] [FR set K [mustache frame null new]] [FR has? K] [info commands $n]
} -result {1 {} 1 {}}

# # ## ### ##### ######## ############# #####################
## unset

tcltest::test frame-mapping-unset-1.0 "unset, wrong args, not enough" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR unset
} -returnCodes error -result {wrong # args: should be "FR unset k"}

tcltest::test frame-mapping-unset-1.1 "unset, wrong args, too many" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR unset K X
} -returnCodes error -result {wrong # args: should be "FR unset k"}

tcltest::test frame-mapping-unset-2.0 "unset, missing" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    list [FR has? K] [FR unset K] [FR has? K]
} -result {0 {} 0}

tcltest::test frame-mapping-unset-2.1 "unset" -setup {
    mustache frame mapping create FR {}
    FR set K [mustache frame null new]
    set n [FR field K]
} -cleanup {
    FR destroy
    unset n
} -body {
    list [FR has? K] [FR unset K] [FR has? K] [info commands $n]
} -result {1 {} 0 {}}

# # ## ### ##### ######## ############# #####################
## rename

tcltest::test frame-mapping-rename-1.0 "rename, wrong args, not enough" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR rename
} -returnCodes error -result {wrong # args: should be "FR rename k new"}

tcltest::test frame-mapping-rename-1.1 "rename, wrong args, not enough" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR rename K
} -returnCodes error -result {wrong # args: should be "FR rename k new"}

tcltest::test frame-mapping-rename-1.2 "rename, wrong args, too many" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR rename K NEW X
} -returnCodes error -result {wrong # args: should be "FR rename k new"}

tcltest::test frame-mapping-rename-1.3 "rename, no source" -setup {
    mustache frame mapping create FR {}
} -cleanup {
    FR destroy
} -body {
    FR rename K NEW
} -returnCodes error -result {Field 'K' is not known}

tcltest::test frame-mapping-rename-2.0 "rename" -setup {
    mustache frame mapping create FR {}
    FR set K [mustache frame null new]
} -cleanup {
    FR destroy
} -body {
    list [FR has? K] [FR has? Q] [FR rename K Q] [FR has? K] [FR has? Q]
} -result {1 0 {} 0 1}

tcltest::test frame-mapping-rename-2.1 "rename, overwrite" -setup {
    mustache frame mapping create FR {}
    FR set K [mustache frame null new]
    FR set Q [mustache frame null new]
    set n [FR field Q]
} -cleanup {
    FR destroy
    unset n
} -body {
    list [FR has? K] [FR has? Q] [FR rename K Q] [FR has? K] [FR has? Q] [info commands $n]
} -result {1 1 {} 0 1 {}}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
