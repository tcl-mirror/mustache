# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2019-2021 Andreas Kupries
# # ## ### ##### ######## ############# #####################
##
#
# Process the test specifications of the original testsuite (*) with
# the original (ruby) `mustache` (Has to be in the PATH). This code is
# inspired by the script `tests.tcl` of project `mustache.tcl`
# (gh@ianka/mustache.tcl, BSD licensed).
#
# When active the results are written to the `$env(WORKSPACE)/Specs/`
# hierarchy. Activation is done by disabling the `return` command at
# (**).
#
# (*) The local copy of these is under `tests/input/spec/`.
#
# This operation is useful for comparing the original ruby structures
# to my tree structure. Especially around the handling of standalone
# tags. This is not required for builders and installers, thus why
# this test is disabled by default.
#
# (**)
return

kt check Tcl     8.5
kt check tcltest 2

kt local testing mustache::parse

kt source support/util.tcl

proc SaveExpanded {label template data expected partials desc} {
    global env
    set dstroot [file join $env(WORKSPACE) Specs ${label}]
    file mkdir $dstroot

    fileutil::writeFile $dstroot/template.mustache $template
    fileutil::writeFile $dstroot/context.txt       $data
    fileutil::writeFile $dstroot/expected.txt      $expected
    fileutil::writeFile $dstroot/partials.txt      $partials
    fileutil::writeFile $dstroot/description.txt   $desc

    # Baseline parsing structures from the original ruby mustache
    exec mustache --token $dstroot/template.mustache > $dstroot/template.rb
    return
}

# # ## ### ##### ######## ############# #####################

tcltest::test mustache-spec-inspection {Spec Expansion} -body {
    if {![llength [auto_execok mustache]]} {
	set _ {Upstream mustache not in PATH}
    } elseif {![info exists env(WORKSPACE)] || ($env(WORKSPACE) eq "")} {
	set _ {Environment variable WORKSPACE not set or empty}
    } else {
	foreach specfile [Specs] {
	    lassign [Tests $specfile] label tests

	    foreach spec $tests {
		incr k

		Decode $spec name desc data template expected partials
		if {![info exists partials]} { set partials {} }

		SaveExpanded $label/[format %02d ${k}]-$name \
		    $template $data $expected $partials $desc

		unset -nocomplain name desc data template expected partials
	    }

	    #break
	    unset k
	}
    }
} -result {}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
