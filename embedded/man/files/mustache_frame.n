'\"
'\" Generated from file 'mustache_frame\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2019 Andreas Kupries
'\" Copyright (c) 2019 Documentation, Andreas Kupries
'\"
.TH "mustache::frame" n 1 doc "Mustache\&. Packages for logic-less templating"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
mustache::frame \- Mustache - Data frames with fields
.SH SYNOPSIS
package require \fBmustache::frame \fR
.sp
\fB::mustache::frame::fromTags\fR \fIspec\fR
.sp
\fB::mustache::frame::scalar\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache::frame::scalar\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache::frame::sequence\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache::frame::sequence\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache::frame::mapping\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache::frame::mapping\fR \fBnew\fR \fIvalue\fR
.sp
\fB<framecmd>\fR \fBhas?\fR \fIfield\fR
.sp
\fB<framecmd>\fR \fBfield\fR \fIfield\fR
.sp
\fB<framecmd>\fR \fBiter\fR \fIcontext\fR \fIscript\fR
.sp
\fB<framecmd>\fR \fBiterable?\fR
.sp
\fB<framecmd>\fR \fBnil?\fR
.sp
\fB<framecmd>\fR \fBvalue\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to the Mustache project, written by Andreas Kupries\&.
.PP
For availability please read \fIMustache - How To Get The Sources\fR\&.
.PP
The contexts used by mustache renderer require \fIdata frames\fR to
hold values of various types\&.
.PP
This package provides suitable TclOO classes for scalar values,
sequences, and mappings\&.
.PP
Note however that any command prefix supporting the
\fBInstance API\fR will be suitable\&.
.SH "CLASS API"
.TP
\fB::mustache::frame::fromTags\fR \fIspec\fR
Converts the tagged nested data structure in \fIspec\fR, representing
a hierarchy of mappings, sequences, and scalar values, into an
equivalent hierarchy of data frame objects\&.
.sp
Returns the root object of the generated data frame hierarchy\&.
.sp
The \fIspec\fR has to be a 2-element list of tag and value, in
this order\&. The accepted tags and the associated values are
.RS
.TP
\fBscalar\fR
The value is an arbitrary string\&.
.TP
\fBsequence\fR
The value is a Tcl list containing nested specs\&.
.TP
\fBmapping\fR
The value is a Tcl dictionary whose keys and values are nested
specs\&. Note however that it is expected that keys are always
tagged as scalars\&.
.RE
.sp
Note that the \fBTclYAML\fR package is able to generate
this type of tagged structure\&.
.sp
Example:
.CS


mapping {
	{scalar FIELD} {scalar VAL}
	{scalar SEQ} {sequence {
		{scalar 1}
		{scalar 2}
		{scalar 3}
	}}
	{scalar SUB} {mapping {
		{scalar CHILD} {scalar X}
	}}
}

.CE
.TP
\fB::mustache::frame::scalar\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache::frame::scalar\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new scalar data frame, initializes
it using the \fIvalue\fR and returns the fully qualified name of that
instance\&.
.TP
\fB::mustache::frame::sequence\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache::frame::sequence\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new sequence data frame,
initialize it using the \fIvalue\fR and return the fully qualified
name of that instance\&.
.sp
The \fIvalue\fR has to be a list of data frames\&.
.sp
\fIAttention:\fR The new sequence takes over ownership of the
data frames in the list, and they will be destroyed when the sequence
is destroyed\&.
.TP
\fB::mustache::frame::mapping\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache::frame::mapping\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new mapping data frame, initialize
it using the \fIvalue\fR and return the fully qualified name of that
instance\&.
.sp
The \fIvalue\fR has to be a dictionary mapping arbitrary
strings to data frames\&. The keys name the fields which can be found,
the data frames hold the associated values\&.
.sp
\fIAttention:\fR The new mapping takes over ownership of the
data frames in the dictionary, and they will be destroyed when the
mapping is destroyed\&.
.PP
.SH "INSTANCE API"
.PP
Data frames are what the context uses as containers for typed
values\&. It should be noted that it actually does not care about the
specific type of a value, only about the behaviour it supports, which
can be queried (See methods \fBnil?\fR and \fBiterable?\fR)\&.
.TP
\fB<framecmd>\fR \fBhas?\fR \fIfield\fR
Checks if the value has the named \fIfield\fR\&.
.sp
Returns a boolean value indicating either success
(\fBtrue\fR) or failure (\fBfalse\fR) of the search\&.
.sp
Note that scalars and sequences do not have fields, searching
them always fails\&.
.TP
\fB<framecmd>\fR \fBfield\fR \fIfield\fR
Returns the data frame for the named \fIfield\fR\&.
.sp
Scalars and sequences throw an error, as they do not have
fields\&. A mapping will throw an error only if the named \fIfield\fR
is not known\&.
.TP
\fB<framecmd>\fR \fBiter\fR \fIcontext\fR \fIscript\fR
Interates over the elements of the frame and invokes the \fIscript\fR
for each of them\&.
During the execution of the \fIscript\fR the active element will be
pushed into the \fIcontext\fR, and popped again after\&.
.sp
Returns the empty string\&.
.sp
Scalars and mappings will throw an error, as they cannot be
itereated over\&.
.TP
\fB<framecmd>\fR \fBiterable?\fR
Asks the frame if it can be iterated over\&. In other words, if it is a
non-empty sequence of values\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that the frame
can be iterated over\&.
.sp
Scalars and mapping always return \fBfalse\fR\&. Sequences
return \fBfalse\fR only if they are mpty\&.
.TP
\fB<framecmd>\fR \fBnil?\fR
Asks the frame if it is nil, false, empty, etc\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that the frame's
value is indeed nil, empty, false, etc\&.
.sp
Scalars are nil if they are either empty string, or represent a
boolean \fBfalse\fR\&.
.sp
Sequences and mapping are nil if they are empty, i\&.e of length
or size \fB0\fR\&.
.TP
\fB<framecmd>\fR \fBvalue\fR
Returns the value of the frame\&. Supported by all types\&.
.sp
Sequences and mappings return stringifications of their list or
dictionary, respectively\&. This will recurse through nested structures\&.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
Both the package(s) and this documentation will undoubtedly contain
bugs and other problems\&.
Please report such at
\fIMustache Tickets\fR [https:/core\&.tcl\&.tk/akupries/mustache]\&.
.PP
Please also report any ideas you may have for enhancements of
either package(s) and/or documentation\&.
.SH KEYWORDS
logic-less templates, mustache, templating
.SH COPYRIGHT
.nf
Copyright (c) 2019 Andreas Kupries
Copyright (c) 2019 Documentation, Andreas Kupries

.fi
