'\"
'\" Generated from file 'mustache_frame\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2019-2021 Andreas Kupries
'\" Copyright (c) 2019-2021 Documentation, Andreas Kupries
'\"
.TH "mustache::frame" n 1 doc "Mustache\&. Packages for logic-less templating"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
mustache::frame \- Mustache - Data frames with fields
.SH SYNOPSIS
package require \fBmustache::frame \fR
.sp
\fB::mustache frame fromTags\fR \fIspec\fR
.sp
\fB::mustache frame bool\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame bool\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame float\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame float\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame int\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame int\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame null\fR \fBcreate\fR \fIobj\fR ?\fIvalue\fR?
.sp
\fB::mustache frame null\fR \fBnew\fR ?\fIvalue\fR?
.sp
\fB::mustache frame scalar\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame scalar\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame string\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame string\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame string!\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame string!\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame sequence\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame sequence\fR \fBnew\fR \fIvalue\fR
.sp
\fB::mustache frame mapping\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.sp
\fB::mustache frame mapping\fR \fBnew\fR \fIvalue\fR
.sp
\fBframeCmd\fR \fBtype\fR
.sp
\fBframeCmd\fR \fBis\fR \fItype\fR
.sp
\fBframeCmd\fR \fBhas?\fR \fIfield\fR
.sp
\fBframeCmd\fR \fBfield\fR \fIfield\fR
.sp
\fBframeCmd\fR \fBiter\fR \fIcontext\fR \fIscript\fR
.sp
\fBframeCmd\fR \fBiterable?\fR
.sp
\fBframeCmd\fR \fBnil?\fR
.sp
\fBframeCmd\fR \fBvalue\fR
.sp
\fBframeCmd\fR \fBas\fR \fItype\fR
.sp
\fBframeCmd\fR \fBvisit\fR ?\fIword\fR\&.\&.\&.?
.sp
\fB{*}word\&.\&.\&.\fR \fItype\fR \fIframe\fR \fIvalue\fR
.sp
\fB{*}word\&.\&.\&.\fR \fBsequence start\fR \fIframe\fR
.sp
\fB{*}word\&.\&.\&.\fR \fBsequence exit\fR \fIframe\fR \fIvalue\fR
.sp
\fB{*}word\&.\&.\&.\fR \fBmapping start\fR \fIframe\fR
.sp
\fB{*}word\&.\&.\&.\fR \fBmapping exit\fR \fIframe\fR \fIvalue\fR
.sp
\fBscalarCmd\fR \fBset\fR \fIvalue\fR
.sp
\fBscalarCmd\fR \fBvalidate\fR \fIvalue\fR
.sp
\fBmappingCmd\fR \fBset\fR \fIkey\fR \fIvalue\fR
.sp
\fBmappingCmd\fR \fBunset\fR \fIkey\fR
.sp
\fBmappingCmd\fR \fBrename\fR \fIkey\fR \fInewkey\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to the Mustache project for Tcl, written by
Andreas Kupries\&.
.PP
It provides a set of five related Tcl packages for the parsing
and rendering of \fImustache\fR [https://mustache\&.github\&.io/]-style logic-less templates,
plus an application for easy command-line access to the functionality\&.
.PP
For availability please read \fIMustache - How To Get The Sources\fR\&.
.PP
.SH OVERVIEW
\fBmustache::context\fR objects make use of \fIdata frame\fR
objects to hold the values they will hand to the
\fBmustache render\fR command while it renders a template\&.
.PP
\fBmustache::frame\fR provides seven TclOO classes for
holding scalar values of various types, sequences, and mappings, all
suitable for working with the objects provided by the
\fBmustache::context\fR package\&.
.PP
Note however that \fIany\fR command prefix supporting the
\fBInstance API\fR below will be suitable for working with the
same\&.
.PP
This is not necessarily true for custom context objects\&. Such
may have their own API for working with typed values\&.
.SH "CLASS API"
.TP
\fB::mustache frame fromTags\fR \fIspec\fR
Converts the tagged nested data structure in \fIspec\fR, representing
a hierarchy of mappings, sequences, and scalar values, into an
equivalent hierarchy of data frame objects\&.
.sp
Returns the root object of the generated data frame hierarchy\&.
.sp
The \fIspec\fR has to be a 2-element list of tag and value, in
this order\&. The accepted tags and the associated values are
.RS
.TP
\fBbool\fR
The value is a boolean\&.
.TP
\fBfloat\fR
The value is a floating point number\&.
.TP
\fBint\fR
The value is an integer number\&.
.TP
\fBnull\fR
The value is null/nil/missing\&.
.TP
\fBscalar\fR
.TP
\fBstring\fR
The value is an arbitrary string\&.
Internally it is mapped to \fBstring!\fR frames\&.
.TP
\fBsequence\fR
The value is a Tcl list containing nested specs\&.
.TP
\fBmapping\fR
The value is a Tcl dictionary whose keys and values are nested
specs\&. Note however that it is expected that keys are always
tagged as scalars\&.
.RE
.sp
\fINote\fR that the \fB\fITclYAML\fR [https://core\&.tcl-lang\&.org/akupries/tclyaml]\fR package is
able to generate this type of tagged structure\&.
.sp
\fINote\fR further that the type-specific tags are only
generated by \fITclYAML\fR [https://core\&.tcl-lang\&.org/akupries/tclyaml] version 0\&.5 and up\&. Version 0\&.4 and
before generate only the un-typed \fBscalar\fR tag\&.
.sp
Example:
.CS


mapping {
	{scalar FIELD} {scalar VAL}
	{scalar SEQ} {sequence {
		{scalar 1}
		{scalar 2}
		{scalar 3}
	}}
	{scalar SUB} {mapping {
		{scalar CHILD} {scalar X}
	}}
}

.CE
.TP
\fB::mustache frame bool\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame bool\fR \fBnew\fR \fIvalue\fR
.TP
\fB::mustache frame float\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame float\fR \fBnew\fR \fIvalue\fR
.TP
\fB::mustache frame int\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame int\fR \fBnew\fR \fIvalue\fR
.TP
\fB::mustache frame null\fR \fBcreate\fR \fIobj\fR ?\fIvalue\fR?
.TP
\fB::mustache frame null\fR \fBnew\fR ?\fIvalue\fR?
.TP
\fB::mustache frame scalar\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame scalar\fR \fBnew\fR \fIvalue\fR
.TP
\fB::mustache frame string\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame string\fR \fBnew\fR \fIvalue\fR
.TP
\fB::mustache frame string!\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame string!\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new \fIscalar\fR data frame of
the given type, initialize it using the \fIvalue\fR and return the
fully qualified name of that instance\&.
.sp
\fIATTENTION\fR
Of these three, best use \fBstring!\fR over all else\&.
.sp
\fIDo not use\fR \fBstring\fR\&. While the disrecommended type is
the original type for string values it is now present only to pass the
mustache compatibility tests\&. It comes with auto-magic behaviour
counter to what is expected from a string type, i\&.e\&. to pass all
values as they are\&.
.sp
\fBstring\fR does not do that\&. Any value which looks like a number it
"normalizes"\&.
.sp
The new type \fBstring!\fR on the other hand does exactly that\&. No
auto-magic normalization, i\&.e\&. mangling of things looking like
numbers\&. Just passing values as they are\&.
.TP
\fB::mustache frame sequence\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame sequence\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new \fIsequence\fR data frame,
initialize it using the \fIvalue\fR and return the fully qualified
name of that instance\&.
.sp
The \fIvalue\fR has to be a list of data frame objects\&.
.sp
\fIAttention:\fR The new sequence takes over ownership of the
data frames in the list, and they will be destroyed when the sequence
is destroyed\&.
.TP
\fB::mustache frame mapping\fR \fBcreate\fR \fIobj\fR \fIvalue\fR
.TP
\fB::mustache frame mapping\fR \fBnew\fR \fIvalue\fR
These constructor commands create a new \fImapping\fR data frame,
initialize it using the \fIvalue\fR and return the fully qualified
name of that instance\&.
.sp
The \fIvalue\fR has to be a dictionary mapping arbitrary
strings to data frames\&. The keys of the dictionary name the fields
which can be found in the mapping later on, and the data frames hold
the associated values\&.
.sp
\fIAttention:\fR The new mapping takes over ownership of the
data frames in the dictionary, and they will be destroyed when the
mapping is destroyed\&.
.PP
.SH "INSTANCE API"
.PP
Data frames are what the context uses as containers for typed
values\&. It should be noted that it actually does not care about the
specific type of a value, only about the behaviour it supports, which
can be queried (See the methods \fBnil?\fR and \fBiterable?\fR)\&.
.TP
\fBframeCmd\fR \fBtype\fR
Returns the type of the frame\&.
.TP
\fBframeCmd\fR \fBis\fR \fItype\fR
Checks if the frame is of the specified \fItype\fR and returns the
result as a boolean value\&.
.TP
\fBframeCmd\fR \fBhas?\fR \fIfield\fR
Checks if the value has the named \fIfield\fR\&.
.sp
Returns a boolean value indicating either success
(\fBtrue\fR) or failure (\fBfalse\fR) of the search\&.
.sp
Note that scalars and sequences do not have fields\&. Searching
them always fails\&.
.TP
\fBframeCmd\fR \fBfield\fR \fIfield\fR
Returns the data frame for the named \fIfield\fR\&.
.sp
Scalars and sequences throw an error, as they do not have
fields\&. A mapping will throw an error only if the named \fIfield\fR
is not known\&.
.TP
\fBframeCmd\fR \fBiter\fR \fIcontext\fR \fIscript\fR
Iterates over the elements of the frame and invokes the \fIscript\fR
for each of them\&.
During the execution of the \fIscript\fR the active element will be
pushed into the \fIcontext\fR, and popped again after\&.
.sp
Returns the empty string\&.
.sp
Scalars and mappings will throw an error, as they cannot be
iterated over\&.
.TP
\fBframeCmd\fR \fBiterable?\fR
Asks the frame if it can be iterated over\&. In other words, if it is a
non-empty sequence of values\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that the frame
can be iterated over\&.
.sp
Scalars and mappings always return \fBfalse\fR\&. Sequences
return \fBfalse\fR only if they are mpty\&.
.TP
\fBframeCmd\fR \fBnil?\fR
Asks the frame if it is nil, false, empty, etc\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that the frame's
value is indeed nil, empty, false, etc\&.
.sp
Strings are nil if they are either the empty string, or their
value can be interpreted as a boolean value, and is representing
\fBfalse\fR\&.
.sp
Numbers are never nil, nulls are always nil, and booleans are
nil if they represent \fBfalse\fR\&.
.sp
Sequences and mappings are nil if they are empty, i\&.e of length
or size \fB0\fR\&.
.TP
\fBframeCmd\fR \fBvalue\fR
Returns the Tcl string value of the frame\&. Supported by all types\&.
.sp
Sequences and mappings return Tcl stringifications of their
list or dictionary, respectively\&. This will recurse through nested
structures\&.
.TP
\fBframeCmd\fR \fBas\fR \fItype\fR
Returns the string representation of the data frame as per the
specified \fItype\fR\&.
.sp
It is expected that the \fItype\fR is backed by a package named
\fB::mustache::frame::as::<\fItype\fR>\fR, exporting a command of
the same name\&.
.sp
This command has to be suitable for use with the data frame's
\fBvisit\fR method\&.
The \fBas\fR method will invoke \fBvisit\fR with the type
command to perform the actual conversion\&.
.TP
\fBframeCmd\fR \fBvisit\fR ?\fIword\fR\&.\&.\&.?
This method visits the data frame and its children in interleaved
pre- and post-order, invoking the command prefix specified by the
\fIword\fR\&.\&.\&. for each frame once (scalars) or twice (sequences, and
mappings)\&.
.sp
The result of the method is the result of the last invokation
of the command prefix for the top data frame\&.
.sp
The command prefix is always called in the global scope\&. It is
expected to support the signatures below\&. The \fIframe\fR argument is
always the object command of the data frame the call is for\&.
.RS
.TP
\fB{*}word\&.\&.\&.\fR \fItype\fR \fIframe\fR \fIvalue\fR
Called for all scalar frames, once\&. The \fIvalue\fR is the Tcl value
of the scalar\&. The \fItype\fR is one of the possible scalar type tags\&.
.TP
\fB{*}word\&.\&.\&.\fR \fBsequence start\fR \fIframe\fR
Called at the beginning of a sequence, enables initializations in the
converter\&.  The return value, if any, is ignored\&.
.TP
\fB{*}word\&.\&.\&.\fR \fBsequence exit\fR \fIframe\fR \fIvalue\fR
Called after visiting the children of a sequence\&. The \fIvalue\fR is a
list containing the results of visiting the sequence's elements\&.
.TP
\fB{*}word\&.\&.\&.\fR \fBmapping start\fR \fIframe\fR
Called at the beginning of a mapping, enables initializations in the
converter\&.  The return value, if any, is ignored\&.
.TP
\fB{*}word\&.\&.\&.\fR \fBmapping exit\fR \fIframe\fR \fIvalue\fR
Called after visiting the value children of a mapping\&. The \fIvalue\fR
is a dictionary mapping the field names to the results of visiting
their frames\&.
.RE
.PP
.SH "SCALAR INSTANCE API"
.PP
Scalar data frames provide more than just the generic API\&.
These additional methods should only be used after a type check:
.TP
\fBscalarCmd\fR \fBset\fR \fIvalue\fR
Set the new scalar \fIvalue\fR into the frame\&.
An error will be thrown if the value does not match the type of the
frame\&.
The command returns the empty string\&.
.TP
\fBscalarCmd\fR \fBvalidate\fR \fIvalue\fR
Validates the scalar \fIvalue\fR against the frame\&.
An error will be thrown if the value does not match the type of the
frame\&.
The command returns the normalized value, as per the frame's type\&.
.PP
.SH "MAPPING INSTANCE API"
.PP
Mapping data frames provide more than just the generic API\&.
These additional methods should only be used after a type check:
.TP
\fBmappingCmd\fR \fBset\fR \fIkey\fR \fIvalue\fR
Extends or modifies the mapping\&.
After the call the \fIkey\fR maps to the \fIvalue\fR frame\&.
A previously existing assignment for the \fIkey\fR is destroyed\&.
The command returns the empty string\&.
.TP
\fBmappingCmd\fR \fBunset\fR \fIkey\fR
Removes the assignment identified by \fIkey\fR from the mapping\&.
The associated value frame is destroyed\&.
The command returns the empty string\&.
.TP
\fBmappingCmd\fR \fBrename\fR \fIkey\fR \fInewkey\fR
Move the assignment of \fIkey\fR to the \fInewky\fR\&.
An error will be thrown if the \fIkey\fR does not exist\&.
A previously existing assignment for the \fInewkey\fR is destroyed\&.
The command returns the empty string\&.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
Both the package(s) and this documentation will undoubtedly contain
bugs and other problems\&.
Please report such at \fIMustache Tracker\fR [https://core\&.tcl-lang\&.org/akupries/mustache]\&.
.PP
Please also report any ideas you may have for enhancements of
either package(s) and/or documentation\&.
.SH KEYWORDS
data frame, logic-less templates, mustache, templating, typed value, value
.SH COPYRIGHT
.nf
Copyright (c) 2019-2021 Andreas Kupries
Copyright (c) 2019-2021 Documentation, Andreas Kupries

.fi
