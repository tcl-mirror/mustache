'\"
'\" Generated from file 'mustache_context\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2019-2021 Andreas Kupries
'\" Copyright (c) 2019-2021 Documentation, Andreas Kupries
'\"
.TH "mustache::context" n 1 doc "Mustache\&. Packages for logic-less templating"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
mustache::context \- Mustache - Field resolution context
.SH SYNOPSIS
package require \fBmustache::context \fR
.sp
\fB::mustache context\fR \fBcreate\fR \fIobj\fR \fIframe\fR
.sp
\fB::mustache context\fR \fBnew\fR \fIframe\fR
.sp
\fB<contextcmd>\fR \fBhas?\fR \fIfield\fR
.sp
\fB<contextcmd>\fR \fBfocus\fR \fIfield\fR
.sp
\fB<contextcmd>\fR \fBpop\fR
.sp
\fB<contextcmd>\fR \fBpush\fR \fIframe\fR
.sp
\fB<contextcmd>\fR \fBiterable?\fR
.sp
\fB<contextcmd>\fR \fBnil?\fR
.sp
\fB<contextcmd>\fR \fBvalue\fR
.sp
\fB<contextcmd>\fR \fBiter\fR \fIscript\fR
.sp
\fB<contextcmd>\fR \fBtemplate?\fR \fIname\fR
.sp
\fB<contextcmd>\fR \fBtemplate:\fR \fIname\fR \fIspecification\fR
.sp
\fB<contextcmd>\fR \fBtemplate\fR \fIname\fR
.sp
.BE
.SH DESCRIPTION
.PP
Welcome to the Mustache project for Tcl, written by
Andreas Kupries\&.
.PP
It provides a set of five related Tcl packages for the parsing
and rendering of \fImustache\fR [https://mustache\&.github\&.io/]-style logic-less templates,
plus an application for easy command-line access to the functionality\&.
.PP
For availability please read \fIMustache - How To Get The Sources\fR\&.
.PP
.SH OVERVIEW
The \fBmustache render\fR command provided by package
\fBmustache::render\fR requires a \fIcontext\fR as the source of
the values to interpolate into the template it is invoked with\&.
.PP
This package provides a suitable \fBTclOO\fR class\&.
.PP
Note however that \fIany\fR command prefix supporting the
\fBInstance API\fR below will be suitable\&.
.SH "CLASS API"
.TP
\fB::mustache context\fR \fBcreate\fR \fIobj\fR \fIframe\fR
This constructor command creates a new instance \fIobj\fR of the
class, initializes it using the data \fIframe\fR and returns the fully
qualified name of that instance\&.
.sp
The \fIframe\fR command prefix has to support the API of
\fBmustache::frame\fR objects\&.
.sp
\fIAttention:\fR The \fIframe\fR object becomes owned by the
context, and will be destroyed when the context is destroyed\&.
.sp
Additional initialization, i\&.e\&. definition of \fIpartials\fR
(aka \fIparts\fR, aka \fIincludes\fR) can be done via the
\fBtemplate:\fR instance method\&.
.TP
\fB::mustache context\fR \fBnew\fR \fIframe\fR
This constructor command creates a new instance of the class,
initializes it using the data \fIframe\fR and returns the fully
qualified name of that instance\&.
.sp
The \fIframe\fR command prefix has to support the API of
\fBmustache::frame\fR objects\&.
.sp
\fIAttention:\fR The \fIframe\fR object becomes owned by the
context, and will be destroyed when the context is destroyed\&.
.sp
Additional initialization, i\&.e\&. definition of \fIpartials\fR
(aka \fIparts\fR, aka \fIincludes\fR) can be done via the
\fBtemplate:\fR instance method\&.
.PP
.SH "INSTANCE API"
.PP
Contexts are what the mustache renderer delegates field
resolution to, and retrieves the values to interpolate from\&.
.PP
From its point of view a context is a stack of
\fIdata frames\fR from which it can pull values\&. The data frame at
the top of the stack is called \fIdot\fR\&. Any search for named fields
starts at \fIdot\fR, moving deeper into the stack only on misses\&.
.PP
During rendering data frames are pushed on and popped of the
stack at the behest of the renderer, as it walks the template
structure\&.
.TP
\fB<contextcmd>\fR \fBhas?\fR \fIfield\fR
Searches the context for the named \fIfield\fR\&.
Returns a boolean value indicating either success (\fBtrue\fR) or
failure (\fBfalse\fR) of the search\&.
.TP
\fB<contextcmd>\fR \fBfocus\fR \fIfield\fR
Searches the context for the named \fIfield\fR\&.
Throws an error when the field is not found\&.
When found the data frame associated with the field is pushed on the
search stack, i\&.e\&. made \fIdot\fR\&.
.sp
Returns the empty string\&.
.TP
\fB<contextcmd>\fR \fBpop\fR
Removes the data frame at the top of the search stack\&.
Throws an error when trying to pop the root data frame\&. That is the
\fIframe\fR supplied during construction of the context\&.
.sp
Returns the empty string\&.
.TP
\fB<contextcmd>\fR \fBpush\fR \fIframe\fR
Pushed the \fIframe\fR on top of the search stack\&.
.sp
The \fIframe\fR command prefix has to support the API of
\fBmustache::frame\fR objects\&.
.sp
Returns the empty string\&.
.TP
\fB<contextcmd>\fR \fBiterable?\fR
Asks \fIdot\fR if it can be iterated over\&. In other words, if it is a
non-empty sequence of values\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that \fIdot\fR
can be iterated over\&.
.TP
\fB<contextcmd>\fR \fBnil?\fR
Asks \fIdot\fR if it is nil, false, empty, etc\&.
.sp
Returns a boolean value\&. \fBtrue\fR signals that \fIdot\fR
is indeed nil, empty, false, etc\&.
.TP
\fB<contextcmd>\fR \fBvalue\fR
Asks \fIdot\fR for its value, and returns it\&.
.TP
\fB<contextcmd>\fR \fBiter\fR \fIscript\fR
Iterates over the elements of \fIdot\fR and invokes the \fIscript\fR
for each element\&. During the execution of the \fIscript\fR the active
element will be \fIdot\fR\&.
.sp
Returns the empty string\&.
.TP
\fB<contextcmd>\fR \fBtemplate?\fR \fIname\fR
Checks if the context knows abut the \fIname\fRd template\&.
Returns a boolean value indicating either success (\fBtrue\fR) or
failure (\fBfalse\fR) of the search\&.
.TP
\fB<contextcmd>\fR \fBtemplate:\fR \fIname\fR \fIspecification\fR
Defines a new template with \fIname\fR and \fIspecification\fR\&.
.sp
Returns the empty string\&.
.TP
\fB<contextcmd>\fR \fBtemplate\fR \fIname\fR
Returns the specification of the \fIname\fRd template\&.
Throws an error when a template of the \fIname\fR is not known\&.
.PP
.SH "BUGS, IDEAS, FEEDBACK"
Both the package(s) and this documentation will undoubtedly contain
bugs and other problems\&.
Please report such at \fIMustache Tracker\fR [https://core\&.tcl-lang\&.org/akupries/mustache]\&.
.PP
Please also report any ideas you may have for enhancements of
either package(s) and/or documentation\&.
.SH KEYWORDS
context, contexts, dot, logic-less templates, mustache, templating
.SH COPYRIGHT
.nf
Copyright (c) 2019-2021 Andreas Kupries
Copyright (c) 2019-2021 Documentation, Andreas Kupries

.fi
